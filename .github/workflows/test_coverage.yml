name: Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        token: ${{ secrets.GH_TOKEN }}
  
    - name: UpDocker
      run: docker-compose up -d
   
    - name: Build 
      run: go build -v


        
    - name: generate test coverage
      run: go test -v -coverpkg=./... ./... -coverprofile=./cover.out
      
    - name: check test coverage
      uses: vladopajic/go-test-coverage@v2
      with: 
        # Configure action by specifying input parameters individually (option 2)
          profile: cover.out
          local-prefix: github.com/org/project
          threshold-file: 60
          threshold-package: 60
          threshold-total: 60
    
          # go test -v -coverpkg=./... -coverprofile="$PWD/coverage/coverage.txt" ./... -args -test.gocoverdir="$PWD/coverage/"               
          # go test -v -coverpkg=./... -covermode=count -coverprofile=coverage.txt ./...  2>&1 | tee coverage.out

          # go test -cover -coverpkg=./controllers -covermode=count -args -test.gocoverdir="$PWD/coverage/"
          # go tool cover -html=coverage.txt -o coverage/coverage.html


          # retorna % total
          # go tool cover -func=coverage.txt
         
          # - name: Run tests and generate coverage report and comment in PR
    #   run: |
    #     go test -v -coverpkg=./controllers -covermode=count -coverprofile=coverage.txt ./...  2>&1 | tee coverage.out
    #     go tool cover -html=coverage.out -o coverage.html
    
    # - name: Upload coverage HTML report
    #   uses: actions/upload-artifact@v3
    #   with:
    #       name: coverage-report
    #       path: coverage.html

    # - name: Generate Coverage Percent
    #   run: |
    #     GIN_MODE=release go test -race -v -coverpkg=./controllers >> coverage-out.txt
        
    #     PENULTIMA_LINHA=$(tac coverage-out.txt | sed -n 2p)
    #     CODE_COVERAGE=$(echo "$PENULTIMA_LINHA" | grep -oE '[0-9]+\.?[0-9]*')
    #     COVERAGE_GATE=87.1
    #     if (( $(echo "$CODE_COVERAGE < $COVERAGE_GATE" | bc -l) )) ; then
    #       COLOR=red
    #     elif (( $(echo "$COVERAGE >= $COVERAGE_GATE" | bc -l) )); then
    #       COLOR=green
    #     fi
      
    #     git config user.name github-actions
    #     git config user.email github-actions@github.com
    #     git fetch
    #     git checkout badge -f
    #     curl "https://img.shields.io/badge/coverage-$COVERAGE_GATE%25-$COLOR" > badge.svg
    #     git add badge.svg
    #     git commit -m "change badge" || true
    #     git push origin badge
    #     if (( $(echo "$CODE_COVERAGE < $COVERAGE_GATE" | bc -l) )) ; then
    #       printf "\033[0;31mCode coverage: %.1f%% is less than required: %.1f%%\033[0m\n" $CODE_COVERAGE $COVERAGE_GATE
    #       exit -1
    #     elif (( $(echo "$COVERAGE >= $COVERAGE_GATE" | bc -l) )); then
    #       printf "\033[0;32mCode coverage is %.1f%%\033[0m\n" $CODE_COVERAGE
    #     fi

        

      
