name: Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        token: ${{ secrets.GH_TOKEN }}
  
    - name: UpDocker
      run: docker-compose up -d
   
    - name: Build 
      run: go build -v
  
    - name: Run tests and generate coverage report and comment in PR
      run: |
        go install github.com/jstemmer/go-junit-report/v2@latest
        GIN_MODE=release go test -v -coverpkg=./controllers -covermode=count -coverprofile=coverage.txt ./...  2>&1 | tee coverage.out
        go-junit-report < coverage.out > report.xml
      # GIN_MODE=release go test -race -coverprofile=coverage.out -v -coverpkg=./controllers
      # go tool cover -html=coverage.out -o coverage.html

    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      with:
          name: coverage-report
          path: report.xml

    - name: Executar o script Go e capturar a saída
      id: script
      run: |
          output=$(go run Scripts/script.go)
          echo "{output}={output}" >> $GITHUB_OUTPUT

    
    - name: Criar um comentário no PR
      run: |
            pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
            output="${{ steps.script.outputs.output }}"
            comment_body="Resultado do Script:\n\`\`\`\n$output\n\`\`\`"
            echo "Comentando no PR #${pr_number}..."
            curl -X POST -H "Authorization: token $GITHUB_TOKEN" -d "{\"body\":\"$comment_body\"}" "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$pr_number/comments"
    
    - name: Generate Coverage Percent
      run: |
        GIN_MODE=release go test -race -v -coverpkg=./controllers >> coverage-out.txt
        
        PENULTIMA_LINHA=$(tac coverage-out.txt | sed -n 2p)
        CODE_COVERAGE=$(echo "$PENULTIMA_LINHA" | grep -oE '[0-9]+\.?[0-9]*')
        COVERAGE_GATE=87.1
        if (( $(echo "$CODE_COVERAGE < $COVERAGE_GATE" | bc -l) )) ; then
          COLOR=red
        elif (( $(echo "$COVERAGE >= $COVERAGE_GATE" | bc -l) )); then
          COLOR=green
        fi
      
        git config user.name github-actions
        git config user.email github-actions@github.com
        git fetch
        git checkout badge -f
        curl "https://img.shields.io/badge/coverage-$COVERAGE_GATE%25-$COLOR" > badge.svg
        git add badge.svg
        git commit -m "change badge" || true
        git push origin badge
        if (( $(echo "$CODE_COVERAGE < $COVERAGE_GATE" | bc -l) )) ; then
          printf "\033[0;31mCode coverage: %.1f%% is less than required: %.1f%%\033[0m\n" $CODE_COVERAGE $COVERAGE_GATE
          exit -1
        elif (( $(echo "$COVERAGE >= $COVERAGE_GATE" | bc -l) )); then
          printf "\033[0;32mCode coverage is %.1f%%\033[0m\n" $CODE_COVERAGE
        fi

        

      
